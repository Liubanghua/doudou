package cn.iocoder.yudao.module.campus.service.impl;

import cn.hutool.core.collection.CollUtil;
import cn.iocoder.yudao.framework.common.pojo.PageResult;
import cn.iocoder.yudao.module.campus.controller.admin.vo.student.StudentPageReqVO;
import cn.iocoder.yudao.module.campus.controller.admin.vo.student.StudentTempRecordRespVO;
import cn.iocoder.yudao.module.campus.controller.admin.vo.temprecord.TempRecordPageReqVO;
import cn.iocoder.yudao.module.campus.convert.StudentConvert;
import cn.iocoder.yudao.module.campus.convert.TempRecordConvert;
import cn.iocoder.yudao.module.campus.dal.dataobject.StudentDO;
import cn.iocoder.yudao.module.campus.dal.dataobject.TempRecordDO;
import cn.iocoder.yudao.module.campus.dal.mysql.TempRecordMapper;
import cn.iocoder.yudao.module.campus.service.StudentService;
import cn.iocoder.yudao.module.campus.service.TempRecordService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

/**
 * @program: 智慧校园
 * @description:
 * @author: pengzhenlong
 * @date: 2022/6/17
 */
@Service
@Slf4j
public class TempRecordServiceImpl implements TempRecordService {

    @Resource
    private TempRecordMapper tempRecordMapper;

    @Resource
    private StudentService studentService;

    @Override
    public PageResult<TempRecordDO> getTempRecordPage(TempRecordPageReqVO reqVO) {
        return tempRecordMapper.selectPage(reqVO, studentService.getStudentIdsByCondition(convertConditionToStudentPageReqVO(reqVO)));
    }

    private StudentPageReqVO convertConditionToStudentPageReqVO(TempRecordPageReqVO reqVO) {
        StudentPageReqVO studentPageReqVO = new StudentPageReqVO();
        studentPageReqVO.setDeptId(reqVO.getDeptId());
        studentPageReqVO.setSex(reqVO.getSex());
        studentPageReqVO.setStudentNo(reqVO.getStudentNo());
        studentPageReqVO.setStudentName(reqVO.getStudentName());

        return studentPageReqVO;
    }

    @Override
    public StudentTempRecordRespVO getTempRecordByStudentIdAndDate(Long studentId, Date time) {
        //sql操作，查询到原始数据
        StudentDO student = studentService.selectById(studentId);
        List<TempRecordDO> tempRecords = tempRecordMapper.selectTempRecords(studentId, time);

        StudentTempRecordRespVO respVO = StudentConvert.INSTANCE.convert(student);
        respVO.setTempRecords(TempRecordConvert.INSTANCE.convert(tempRecords));
        respVO.setRecordCreateTime(time);

        return respVO;
    }

    @Override
    public void deleteTempRecordsByStudentId(Long id) {
        List<TempRecordDO> tempRecords = tempRecordMapper.selectList(TempRecordDO::getStudentId, id);
        if (CollUtil.isEmpty(tempRecords)) {
            return;
        }
        List<Long> ids = tempRecords.stream().map(TempRecordDO::getId).collect(Collectors.toList());
        tempRecordMapper.deleteBatchIds(ids);

    }
}
