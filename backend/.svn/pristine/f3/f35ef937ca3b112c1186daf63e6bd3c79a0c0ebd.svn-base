package cn.iocoder.yudao.module.campus.service.impl;

import cn.hutool.core.collection.CollUtil;
import cn.iocoder.yudao.framework.common.pojo.PageResult;
import cn.iocoder.yudao.framework.common.util.collection.CollectionUtils;
import cn.iocoder.yudao.module.campus.controller.admin.vo.student.StudentCreateReqVO;
import cn.iocoder.yudao.module.campus.controller.admin.vo.student.StudentPageReqVO;
import cn.iocoder.yudao.module.campus.controller.admin.vo.student.StudentUpdateDeptReqVO;
import cn.iocoder.yudao.module.campus.controller.admin.vo.student.StudentUpdateReqVO;
import cn.iocoder.yudao.module.campus.convert.StudentConvert;
import cn.iocoder.yudao.module.campus.dal.dataobject.StudentDO;
import cn.iocoder.yudao.module.campus.dal.mysql.StudentMapper;
import cn.iocoder.yudao.module.campus.service.StudentService;
import cn.iocoder.yudao.module.campus.service.TempRecordService;
import cn.iocoder.yudao.module.system.dal.dataobject.dept.DeptDO;
import cn.iocoder.yudao.module.system.service.dept.DeptService;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;

import static cn.iocoder.yudao.framework.common.exception.util.ServiceExceptionUtil.exception;
import static cn.iocoder.yudao.framework.common.util.collection.CollectionUtils.convertSet;
import static cn.iocoder.yudao.module.system.enums.ErrorCodeConstants.*;

/**
 * @program: 智慧校园
 * @description: 学生管理实现类
 * @author: pengzhenlong
 * @date: 2022/6/15
 */
@Service
@Slf4j
public class StudentServiceImpl extends ServiceImpl<StudentMapper, StudentDO> implements StudentService {

    @Resource
    private StudentMapper studentMapper;

    @Resource
    private TempRecordService tempRecordService;

    @Resource
    private DeptService deptService;

    @Override
    public PageResult<StudentDO> getStudentPage(StudentPageReqVO reqVO) {
        return studentMapper.selectPage(reqVO, getDeptCondition(reqVO.getDeptId()));
    }

    /**
     * 获得部门条件：查询指定部门的子部门编号们，包括自身
     *
     * @param deptId 部门编号
     * @return 部门编号集合
     */
    private Set<Long> getDeptCondition(Long deptId) {
        if (deptId == null) {
            return Collections.emptySet();
        }
        Set<Long> deptIds = convertSet(deptService.getDeptsByParentIdFromCache(
                deptId, true), DeptDO::getId);
        deptIds.add(deptId); // 包括自身
        return deptIds;
    }


    @Override
    public List<Long> getStudentIdsByCondition(StudentPageReqVO reqVO) {
        PageResult<StudentDO> result = this.getStudentPage(reqVO);
        if (result != null && CollUtil.isNotEmpty(result.getList())) {
            List<Long> studentIds = new ArrayList<>();
            for (StudentDO studentDO : result.getList()) {
                studentIds.add(studentDO.getId());
            }
            return studentIds;
        }
        return null;
    }

    @Override
    public List<StudentDO> getStudentsByIds(List<Long> ids) {
        return studentMapper.selectBatchIds(ids);
    }

    @Override
    public Long createStudent(StudentCreateReqVO reqVO) {
        checkStudentNoUnique(reqVO.getStudentNo());
        // 校验部门处于开启状态
        deptService.validDepts(CollectionUtils.singleton(reqVO.getDeptId()));

        //插入学生
        StudentDO studentDO = StudentConvert.INSTANCE.convert(reqVO);
        studentMapper.insert(studentDO);

        return studentDO.getId();
    }

    private void checkStudentNoUnique(String studentNo) {
        StudentDO student = studentMapper.selectByStudentNo(studentNo);
        if (student != null) {
            throw exception(STUDENT_EXISTSED);
        }
        return;
    }

    @Override
    public StudentDO selectById(Long id) {
        return studentMapper.selectById(id);
    }

    @Override
    public void deleteStudent(Long id) {
        //校验学生是否存在
        checkStudentExists(id);

        //删除关联信息
        tempRecordService.deleteTempRecordsByStudentId(id);
        studentMapper.deleteById(id);
    }

    @Override
    public void updateStudent(StudentUpdateReqVO reqVO) {
        checkStudentExists(reqVO.getId());
        StudentDO student = StudentConvert.INSTANCE.convertUpdate(reqVO);
        studentMapper.updateById(student);
    }


    @Override
    public void updateStudentsDept(StudentUpdateDeptReqVO reqVO) {
        List<Long> studentIds = reqVO.getStudentIds();
        Long deptId = reqVO.getDeptId();
        if (CollUtil.isEmpty(studentIds)) {
            return;
        }
        checkDeptExists(deptId);

        List<StudentDO> students = new ArrayList<>();
        for (Long studentId : studentIds) {
            StudentDO student = new StudentDO();
            student.setId(studentId);
            student.setDeptId(deptId);
            students.add(student);
        }

        this.saveOrUpdateBatch(students);
    }

    private void checkStudentExists(Long id) {
        if (id == null) {
            return;
        }
        StudentDO student = studentMapper.selectById(id);
        if (student == null) {
            throw exception(STUDENT_NOT_EXISTSED);
        }
    }

    private void checkDeptExists(Long id) {
        if (id == null) {
            return;
        }
        DeptDO dept = deptService.getDept(id);
        if (dept == null) {
            throw exception(DEPT_NOT_FOUND);
        }
    }
}
